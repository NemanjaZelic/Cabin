const { Builder, By, until } = require('selenium-webdriver');
const { createDriver, runTest, sleep } = require('../selenium-setup');
const chrome = require('selenium-webdriver/chrome');

async function testRezervacija() {
  const options = new chrome.Options();
  // NE KORISTIMO HEADLESS!
  options.addArguments('--disable-gpu');
  options.addArguments('--no-sandbox');
  options.addArguments('--start-maximized');
  
  const driver = await createDriver(false); // headless = false

  try {
    console.log('\nüß™ PRAVI TEST: Kompletna rezervacija vikendice');
    console.log('‚ïê'.repeat(60));

    // 1. PRIJAVA
    console.log('\n1Ô∏è‚É£  PRIJAVA TURISTE');
    console.log('-'.repeat(60));
    
    await driver.get('http://localhost:4200/prijava');
    await sleep(2000);
    
    // Naƒëi polja
    const usernameInput = await driver.findElement(By.id('korisnickoIme'));
    const passwordInput = await driver.findElement(By.id('lozinka'));
    const submitBtn = await driver.findElement(By.css('button[type="submit"]'));
    
    await usernameInput.sendKeys('marko');
    await passwordInput.sendKeys('Marko123!');
    await submitBtn.click();
    await sleep(3000);
    
    const urlAfterLogin = await driver.getCurrentUrl();
    if (!urlAfterLogin.includes('turista')) {
      throw new Error('‚ùå FAIL: Prijava nije uspela! URL nije promenjena na /turista');
    }
    console.log('‚úÖ Prijava uspe≈°na');

    // 2. VIKENDICE
    console.log('\n2Ô∏è‚É£  PREGLED VIKENDICA');
    console.log('-'.repeat(60));
    
    await driver.get('http://localhost:4200/turista/vikendice');
    await sleep(3000);
    
    const cards = await driver.findElements(By.css('.card, mat-card, .vikendica-card'));
    console.log(`  Pronaƒëeno ${cards.length} kartica sa vikendica`);
    
    if (cards.length === 0) {
      throw new Error('‚ùå FAIL: Nema vikendica! Backend ne vraƒáa podatke.');
    }
    console.log('‚úÖ Vikendice prikazane');

    // 3. OTVORI DETALJE PRVE VIKENDICE
    console.log('\n3Ô∏è‚É£  OTVARANJE DETALJA VIKENDICE');
    console.log('-'.repeat(60));
    
    // Pronaƒëi link ili dugme u prvoj kartici
    const firstCard = cards[0];
    
    console.log('\nüîç DIJAGNOSTIKA: ≈†ta ima u prvoj kartici?');
    
    // Probaj razliƒçite naƒçine da naƒëe≈° link
    const cardLinks = await firstCard.findElements(By.tagName('a'));
    const cardButtons = await firstCard.findElements(By.tagName('button'));
    const allText = await firstCard.getText();
    
    console.log(`  Tekst kartice:\n${allText}`);
    console.log(`  Broj linkova: ${cardLinks.length}`);
    console.log(`  Broj dugmadi: ${cardButtons.length}`);
    
    // Ispi≈°i SVE linkove
    if (cardLinks.length > 0) {
      for (let i = 0; i < cardLinks.length; i++) {
        const text = await cardLinks[i].getText();
        const href = await cardLinks[i].getAttribute('href');
        const className = await cardLinks[i].getAttribute('class');
        console.log(`    Link ${i + 1}: text="${text}" href="${href}" class="${className}"`);
      }
    }
    
    // Ispi≈°i SVA dugmad
    if (cardButtons.length > 0) {
      for (let i = 0; i < cardButtons.length; i++) {
        const text = await cardButtons[i].getText();
        const className = await cardButtons[i].getAttribute('class');
        console.log(`    Dugme ${i + 1}: "${text}" class="${className}"`);
      }
    }
    
    // Poku≈°aj da naƒëe≈° bilo ≈°ta klikabilno
    let clickable = null;
    
    // Prvo probaj linkove
    for (const link of cardLinks) {
      const href = await link.getAttribute('href');
      if (href && (href.includes('vikendica') || href.includes('detalj'))) {
        clickable = link;
        console.log('  ‚úÖ Na≈°ao link sa href koji sadr≈æi "vikendica"');
        break;
      }
    }
    
    // Ako nema linkova, probaj dugmad
    if (!clickable && cardButtons.length > 0) {
      for (const btn of cardButtons) {
        const text = (await btn.getText()).toLowerCase();
        if (text.includes('detalj') || text.includes('vi≈°e') || text.includes('view')) {
          clickable = btn;
          console.log('  ‚úÖ Na≈°ao dugme sa tekstom koji sadr≈æi "detalj"');
          break;
        }
      }
    }
    
    // Ako NI≈†TA nije pronaƒëeno, mo≈æda sama kartica ima link
    if (!clickable) {
      console.log('  ‚ö†Ô∏è  Nema eksplicitnog linka/dugmeta - probam da kliknem celu karticu...');
      const cardTag = await firstCard.getTagName();
      const cardHref = await firstCard.getAttribute('href');
      console.log(`    Kartica tag: ${cardTag}, href: ${cardHref}`);
      
      if (cardTag === 'a' || cardHref) {
        clickable = firstCard;
      }
    }
    
    if (!clickable) {
      throw new Error('‚ùå FAIL: Kartica nema NIKAKAV naƒçin da se otvore detalji! Ni link ni dugme.');
    }
    
    await clickable.click();
    await sleep(3000);
    console.log('‚úÖ Otvoreni detalji vikendice');

    // 4. REZERVI≈†I
    console.log('\n4Ô∏è‚É£  KREIRANJE REZERVACIJE');
    console.log('-'.repeat(60));
    
    // Naƒëi dugme za rezervaciju
    const allButtons = await driver.findElements(By.tagName('button'));
    console.log(`  Pronaƒëeno ${allButtons.length} dugmadi na stranici:`);
    
    let rezervisiButton = null;
    for (let i = 0; i < allButtons.length; i++) {
      const text = (await allButtons[i].getText()).toLowerCase();
      console.log(`    Dugme ${i + 1}: "${await allButtons[i].getText()}"`);
      
      if (text.includes('rezerv') || text.includes('book') || text.includes('zakaz')) {
        rezervisiButton = allButtons[i];
        break;
      }
    }
    
    if (!rezervisiButton) {
      throw new Error('‚ùå FAIL: Dugme za rezervaciju nije pronaƒëeno!');
    }
    
    await rezervisiButton.click();
    await sleep(2000);
    console.log('‚úÖ Kliknuto na "Rezervi≈°i"');

    // 5. POPUNI FORMU
    console.log('\n5Ô∏è‚É£  POPUNJAVANJE REZERVACIONE FORME');
    console.log('-'.repeat(60));
    
    // Naƒëi sva input polja
    const allInputs = await driver.findElements(By.tagName('input'));
    console.log(`  Pronaƒëeno ${allInputs.length} input polja u formi`);
    
    // Datum OD
    const datumOdInputs = await driver.findElements(By.css(
      'input[type="date"], ' +
      'input[name*="datumOd"], ' +
      'input[name*="checkIn"], ' +
      'input[placeholder*="datum od"]'
    ));
    
    if (datumOdInputs.length === 0) {
      console.log('‚ùå FAIL: Polje "Datum OD" nije pronaƒëeno!');
      console.log('  Dostupna polja:');
      for (const inp of allInputs) {
        const name = await inp.getAttribute('name');
        const placeholder = await inp.getAttribute('placeholder');
        const type = await inp.getAttribute('type');
        console.log(`    - type="${type}" name="${name}" placeholder="${placeholder}"`);
      }
      throw new Error('‚ùå FAIL: Forma za rezervaciju nema polje za "Datum OD"');
    }
    
    // Postavi datume
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 7);
    const datumOd = tomorrow.toISOString().split('T')[0];
    
    const nextWeek = new Date();
    nextWeek.setDate(nextWeek.getDate() + 10);
    const datumDo = nextWeek.toISOString().split('T')[0];
    
    await datumOdInputs[0].clear();
    await datumOdInputs[0].sendKeys(datumOd);
    console.log(`  ‚úì Datum OD: ${datumOd}`);
    
    // Datum DO
    const datumDoInputs = await driver.findElements(By.css(
      'input[name*="datumDo"], ' +
      'input[name*="checkOut"]'
    ));
    
    if (datumDoInputs.length > 0) {
      await datumDoInputs[0].clear();
      await datumDoInputs[0].sendKeys(datumDo);
      console.log(`  ‚úì Datum DO: ${datumDo}`);
    }
    
    // Broj osoba
    const odrasliInputs = await driver.findElements(By.css(
      'input[name*="odrasl"], ' +
      'input[name*="adults"], ' +
      'input[placeholder*="odrasl"]'
    ));
    
    if (odrasliInputs.length > 0) {
      await odrasliInputs[0].clear();
      await odrasliInputs[0].sendKeys('2');
      console.log('  ‚úì Odraslih: 2');
    }

    await sleep(1000);

    // 6. POTVRDI REZERVACIJU
    console.log('\n6Ô∏è‚É£  POTVRDA REZERVACIJE');
    console.log('-'.repeat(60));
    
    // Naƒëi submit dugme
    const allSubmitButtons = await driver.findElements(By.tagName('button'));
    console.log(`  Pronaƒëeno ${allSubmitButtons.length} dugmadi`);
    
    let submitButton = null;
    for (const btn of allSubmitButtons) {
      const type = await btn.getAttribute('type');
      const text = (await btn.getText()).toLowerCase();
      console.log(`    - type="${type}" text="${await btn.getText()}"`);
      
      if (type === 'submit' || text.includes('potvrdi') || text.includes('rezerv')) {
        submitButton = btn;
        break;
      }
    }
    
    if (!submitButton) {
      throw new Error('‚ùå FAIL: Submit dugme nije pronaƒëeno u formi!');
    }
    
    await submitButton.click();
    await sleep(3000);
    console.log('‚úÖ Submit kliknut');
    
    // Proveri success poruku
    const successElements = await driver.findElements(By.css(
      '.success, ' +
      '.alert-success, ' +
      '.mat-snack-bar-container, ' +
      '[class*="success"]'
    ));
    
    if (successElements.length > 0) {
      const successText = await successElements[0].getText();
      console.log(`  ‚úÖ Success poruka: "${successText}"`);
    } else {
      console.log('  ‚ö†Ô∏è  Success poruka nije pronaƒëena (mo≈æda nema)');
    }

    // 7. PROVERI REZERVACIJE
    console.log('\n7Ô∏è‚É£  PROVERA DA LI JE REZERVACIJA KREIRANA');
    console.log('-'.repeat(60));
    
    await driver.get('http://localhost:4200/turista/rezervacije');
    await sleep(3000);
    
    // Proveri kartice ili tabelu
    const rezervacijeCards = await driver.findElements(By.css('.card, mat-card, .rezervacija-card'));
    const rezervacijeTable = await driver.findElements(By.css('table tbody tr'));
    
    const brojRezervacija = rezervacijeCards.length > 0 ? rezervacijeCards.length : rezervacijeTable.length;
    
    console.log(`  Pronaƒëeno ${brojRezervacija} rezervacija`);
    
    if (brojRezervacija === 0) {
      throw new Error('‚ùå‚ùå‚ùå FAIL: Rezervacija NIJE KREIRANA! Stranica rezervacija je prazna!');
    }
    
    console.log('‚úÖ‚úÖ‚úÖ REZERVACIJA JE USPE≈†NO KREIRANA!');

    console.log('\n‚úÖ‚úÖ‚úÖ TEST REZERVACIJE ZAVR≈†EN - SVE RADI!');
    console.log('‚ïê'.repeat(60));

  } catch (error) {
    console.error('\n‚ùå‚ùå‚ùå TEST NIJE PRO≈†AO!');
    console.error('Gre≈°ka:', error.message);
    
    // Screenshot
    try {
      const screenshot = await driver.takeScreenshot();
      require('fs').writeFileSync('screenshot-rezervacija-FAIL.png', screenshot, 'base64');
      console.log('üíæ Screenshot: screenshot-rezervacija-FAIL.png');
    } catch (e) {}
    
    throw error;
  } finally {
    console.log('\n‚è≥ Zatvaram Chrome za 5 sekundi...');
    await sleep(5000);
    await driver.quit();
  }
}

runTest('Rezervacija', testRezervacija);
